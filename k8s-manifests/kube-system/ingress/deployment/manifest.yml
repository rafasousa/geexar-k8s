---
# Source: https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-ds.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: kube-system

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    k8s-app: traefik-ingress-lb
spec:
  selector:
    matchLabels:
      k8s-app: traefik-ingress-lb
      name: traefik-ingress-lb
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress-lb
        name: traefik-ingress-lb
    spec:
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      hostNetwork: true
      containers:
      - image: "{{ traefik_image }}"
        name: traefik-ingress-lb
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: dashboard
          containerPort: 8080
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        args:
        - --api
        - --kubernetes
        - --logLevel=INFO
        - --defaultentrypoints=http,https
        - --entrypoints=Name:https Address::443 TLS
        - --entrypoints=Name:http Address::80

# A NodePort in front of the service may be simpler for the use case of having
# an external proxy front everything, just by hitting one IP, then letting K8s
# do all the routing. But it's slightly annoying in the local Pi setup, because
# I don't want to waste one Pi running Nginx, HAProxy, or something similar,
# just to act as an external LoadBalancer. Though I may change things in the
# future...
# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: traefik-ingress-service
#   namespace: kube-system
# spec:
#   selector:
#     k8s-app: traefik-ingress-lb
#   ports:
#     - protocol: TCP
#       port: 80
#       name: web
#     - protocol: TCP
#       port: 8080
#       name: dashboard
#     - protocol: TCP
#       port: 443
#       name: secure
#   type: NodePort
